/*
 * Kadaster - BRK-Bevragen API
 *
 * D.m.v. deze toepassing worden meerdere, korte bevragingen op de Basis Registratie Kadaster beschikbaar gesteld. Deze toepassing betreft het verstrekken van Kadastrale Onroerende Zaak informatie. 
 *
 * The version of the OpenAPI document: 1.4.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Deel en nummer identificeren een Ter Inschrijving Aangeboden stuk door gebruik te maken van vijf gegevenselementen. Waardelijst in deze component :   [reeks(http://www.kadaster.nl/schemas/waardelijsten/Reekscode/)   [registercode](http://www.kadaster.nl/schemas/waardelijsten/Registercode/)   [soortRegister](http://www.kadaster.nl/schemas/waardelijsten/SoortRegister/) 
    /// </summary>
    [DataContract]
    public partial class DeelEnNummer :  IEquatable<DeelEnNummer>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DeelEnNummer" /> class.
        /// </summary>
        /// <param name="deel">Identificatie van het stuk binnen zijn soort. .</param>
        /// <param name="nummer">Volgnummer van het stuk. .</param>
        /// <param name="reeks">reeks.</param>
        /// <param name="registercode">registercode.</param>
        /// <param name="soortRegister">soortRegister.</param>
        public DeelEnNummer(string deel = default(string), string nummer = default(string), Waardelijst reeks = default(Waardelijst), Waardelijst registercode = default(Waardelijst), Waardelijst soortRegister = default(Waardelijst))
        {
            this.Deel = deel;
            this.Nummer = nummer;
            this.Reeks = reeks;
            this.Registercode = registercode;
            this.SoortRegister = soortRegister;
        }

        /// <summary>
        /// Identificatie van het stuk binnen zijn soort. 
        /// </summary>
        /// <value>Identificatie van het stuk binnen zijn soort. </value>
        [DataMember(Name="deel", EmitDefaultValue=false)]
        public string Deel { get; set; }

        /// <summary>
        /// Volgnummer van het stuk. 
        /// </summary>
        /// <value>Volgnummer van het stuk. </value>
        [DataMember(Name="nummer", EmitDefaultValue=false)]
        public string Nummer { get; set; }

        /// <summary>
        /// Gets or Sets Reeks
        /// </summary>
        [DataMember(Name="reeks", EmitDefaultValue=false)]
        public Waardelijst Reeks { get; set; }

        /// <summary>
        /// Gets or Sets Registercode
        /// </summary>
        [DataMember(Name="registercode", EmitDefaultValue=false)]
        public Waardelijst Registercode { get; set; }

        /// <summary>
        /// Gets or Sets SoortRegister
        /// </summary>
        [DataMember(Name="soortRegister", EmitDefaultValue=false)]
        public Waardelijst SoortRegister { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DeelEnNummer {\n");
            sb.Append("  Deel: ").Append(Deel).Append("\n");
            sb.Append("  Nummer: ").Append(Nummer).Append("\n");
            sb.Append("  Reeks: ").Append(Reeks).Append("\n");
            sb.Append("  Registercode: ").Append(Registercode).Append("\n");
            sb.Append("  SoortRegister: ").Append(SoortRegister).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DeelEnNummer);
        }

        /// <summary>
        /// Returns true if DeelEnNummer instances are equal
        /// </summary>
        /// <param name="input">Instance of DeelEnNummer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DeelEnNummer input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Deel == input.Deel ||
                    (this.Deel != null &&
                    this.Deel.Equals(input.Deel))
                ) && 
                (
                    this.Nummer == input.Nummer ||
                    (this.Nummer != null &&
                    this.Nummer.Equals(input.Nummer))
                ) && 
                (
                    this.Reeks == input.Reeks ||
                    (this.Reeks != null &&
                    this.Reeks.Equals(input.Reeks))
                ) && 
                (
                    this.Registercode == input.Registercode ||
                    (this.Registercode != null &&
                    this.Registercode.Equals(input.Registercode))
                ) && 
                (
                    this.SoortRegister == input.SoortRegister ||
                    (this.SoortRegister != null &&
                    this.SoortRegister.Equals(input.SoortRegister))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Deel != null)
                    hashCode = hashCode * 59 + this.Deel.GetHashCode();
                if (this.Nummer != null)
                    hashCode = hashCode * 59 + this.Nummer.GetHashCode();
                if (this.Reeks != null)
                    hashCode = hashCode * 59 + this.Reeks.GetHashCode();
                if (this.Registercode != null)
                    hashCode = hashCode * 59 + this.Registercode.GetHashCode();
                if (this.SoortRegister != null)
                    hashCode = hashCode * 59 + this.SoortRegister.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
