/*
 * Kadaster - BRK-Bevragen API
 *
 * D.m.v. deze toepassing worden meerdere, korte bevragingen op de Basis Registratie Kadaster beschikbaar gesteld. Deze toepassing betreft het verstrekken van Kadastrale Onroerende Zaak informatie. 
 *
 * The version of the OpenAPI document: 1.3.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// De reden om een stuk niet in te schrijven of om verbetering te vragen. Waardelijst in deze component : [reden](http://www.kadaster.nl/schemas/waardelijsten/RedenVerzoek/) 
    /// </summary>
    [DataContract]
    public partial class RedenVerzoek :  IEquatable<RedenVerzoek>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RedenVerzoek" /> class.
        /// </summary>
        /// <param name="redenOmschrijving">De omschrijving van de reden voor een kadasterverzoek die afwijkt van de standaard redenen die kunnen worden opgegeven. Bij opgave van de reden is voor _overig_ gekozen. .</param>
        /// <param name="reden">reden.</param>
        public RedenVerzoek(string redenOmschrijving = default(string), Waardelijst reden = default(Waardelijst))
        {
            this.RedenOmschrijving = redenOmschrijving;
            this.Reden = reden;
        }

        /// <summary>
        /// De omschrijving van de reden voor een kadasterverzoek die afwijkt van de standaard redenen die kunnen worden opgegeven. Bij opgave van de reden is voor _overig_ gekozen. 
        /// </summary>
        /// <value>De omschrijving van de reden voor een kadasterverzoek die afwijkt van de standaard redenen die kunnen worden opgegeven. Bij opgave van de reden is voor _overig_ gekozen. </value>
        [DataMember(Name="redenOmschrijving", EmitDefaultValue=false)]
        public string RedenOmschrijving { get; set; }

        /// <summary>
        /// Gets or Sets Reden
        /// </summary>
        [DataMember(Name="reden", EmitDefaultValue=false)]
        public Waardelijst Reden { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RedenVerzoek {\n");
            sb.Append("  RedenOmschrijving: ").Append(RedenOmschrijving).Append("\n");
            sb.Append("  Reden: ").Append(Reden).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RedenVerzoek);
        }

        /// <summary>
        /// Returns true if RedenVerzoek instances are equal
        /// </summary>
        /// <param name="input">Instance of RedenVerzoek to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RedenVerzoek input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RedenOmschrijving == input.RedenOmschrijving ||
                    (this.RedenOmschrijving != null &&
                    this.RedenOmschrijving.Equals(input.RedenOmschrijving))
                ) && 
                (
                    this.Reden == input.Reden ||
                    (this.Reden != null &&
                    this.Reden.Equals(input.Reden))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RedenOmschrijving != null)
                    hashCode = hashCode * 59 + this.RedenOmschrijving.GetHashCode();
                if (this.Reden != null)
                    hashCode = hashCode * 59 + this.Reden.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
