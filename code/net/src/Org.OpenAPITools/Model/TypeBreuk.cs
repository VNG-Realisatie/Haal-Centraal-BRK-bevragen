/*
 * Kadaster - BRK-Bevragen API
 *
 * D.m.v. deze toepassing worden meerdere, korte bevragingen op de Basis Registratie Kadaster beschikbaar gesteld. Deze toepassing betreft het verstrekken van Kadastrale Onroerende Zaak informatie. 
 *
 * The version of the OpenAPI document: 1.3.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Een deling van twee gehele getallen. 
    /// </summary>
    [DataContract]
    public partial class TypeBreuk :  IEquatable<TypeBreuk>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TypeBreuk" /> class.
        /// </summary>
        /// <param name="noemer">De noemer van het deel. .</param>
        /// <param name="teller">Het aantal delen. De teller is altijd lager dan de noemer. .</param>
        public TypeBreuk(int noemer = default(int), int teller = default(int))
        {
            this.Noemer = noemer;
            this.Teller = teller;
        }

        /// <summary>
        /// De noemer van het deel. 
        /// </summary>
        /// <value>De noemer van het deel. </value>
        [DataMember(Name="noemer", EmitDefaultValue=false)]
        public int Noemer { get; set; }

        /// <summary>
        /// Het aantal delen. De teller is altijd lager dan de noemer. 
        /// </summary>
        /// <value>Het aantal delen. De teller is altijd lager dan de noemer. </value>
        [DataMember(Name="teller", EmitDefaultValue=false)]
        public int Teller { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TypeBreuk {\n");
            sb.Append("  Noemer: ").Append(Noemer).Append("\n");
            sb.Append("  Teller: ").Append(Teller).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TypeBreuk);
        }

        /// <summary>
        /// Returns true if TypeBreuk instances are equal
        /// </summary>
        /// <param name="input">Instance of TypeBreuk to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TypeBreuk input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Noemer == input.Noemer ||
                    (this.Noemer != null &&
                    this.Noemer.Equals(input.Noemer))
                ) && 
                (
                    this.Teller == input.Teller ||
                    (this.Teller != null &&
                    this.Teller.Equals(input.Teller))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Noemer != null)
                    hashCode = hashCode * 59 + this.Noemer.GetHashCode();
                if (this.Teller != null)
                    hashCode = hashCode * 59 + this.Teller.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {

 
            // Noemer (int) maximum
            if(this.Noemer > (int)99999999)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Noemer, must be a value less than or equal to 99999999.", new [] { "Noemer" });
            }

            // Noemer (int) minimum
            if(this.Noemer < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Noemer, must be a value greater than or equal to 1.", new [] { "Noemer" });
            }


 
            // Teller (int) maximum
            if(this.Teller > (int)99999999)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Teller, must be a value less than or equal to 99999999.", new [] { "Teller" });
            }

            yield break;
        }
    }

}
