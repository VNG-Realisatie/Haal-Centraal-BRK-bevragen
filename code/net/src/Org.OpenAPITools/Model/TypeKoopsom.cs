/*
 * Kadaster - BRK-Bevragen API
 *
 * D.m.v. deze toepassing worden meerdere, korte bevragingen op de Basis Registratie Kadaster beschikbaar gesteld. Deze toepassing betreft het verstrekken van Kadastrale Onroerende Zaak informatie. 
 *
 * The version of the OpenAPI document: 1.3.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// TypeKoopsom
    /// </summary>
    [DataContract]
    public partial class TypeKoopsom :  IEquatable<TypeKoopsom>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TypeKoopsom" /> class.
        /// </summary>
        /// <param name="koopsom">koopsom.</param>
        /// <param name="koopjaar">koopjaar.</param>
        /// <param name="indicatieMetMeerObjectenVerkregen">indicatieMetMeerObjectenVerkregen.</param>
        public TypeKoopsom(int koopsom = default(int), int koopjaar = default(int), bool indicatieMetMeerObjectenVerkregen = default(bool))
        {
            this.Koopsom = koopsom;
            this.Koopjaar = koopjaar;
            this.IndicatieMetMeerObjectenVerkregen = indicatieMetMeerObjectenVerkregen;
        }

        /// <summary>
        /// Gets or Sets Koopsom
        /// </summary>
        [DataMember(Name="koopsom", EmitDefaultValue=false)]
        public int Koopsom { get; set; }

        /// <summary>
        /// Gets or Sets Koopjaar
        /// </summary>
        [DataMember(Name="koopjaar", EmitDefaultValue=false)]
        public int Koopjaar { get; set; }

        /// <summary>
        /// Gets or Sets IndicatieMetMeerObjectenVerkregen
        /// </summary>
        [DataMember(Name="indicatieMetMeerObjectenVerkregen", EmitDefaultValue=false)]
        public bool IndicatieMetMeerObjectenVerkregen { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TypeKoopsom {\n");
            sb.Append("  Koopsom: ").Append(Koopsom).Append("\n");
            sb.Append("  Koopjaar: ").Append(Koopjaar).Append("\n");
            sb.Append("  IndicatieMetMeerObjectenVerkregen: ").Append(IndicatieMetMeerObjectenVerkregen).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TypeKoopsom);
        }

        /// <summary>
        /// Returns true if TypeKoopsom instances are equal
        /// </summary>
        /// <param name="input">Instance of TypeKoopsom to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TypeKoopsom input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Koopsom == input.Koopsom ||
                    (this.Koopsom != null &&
                    this.Koopsom.Equals(input.Koopsom))
                ) && 
                (
                    this.Koopjaar == input.Koopjaar ||
                    (this.Koopjaar != null &&
                    this.Koopjaar.Equals(input.Koopjaar))
                ) && 
                (
                    this.IndicatieMetMeerObjectenVerkregen == input.IndicatieMetMeerObjectenVerkregen ||
                    (this.IndicatieMetMeerObjectenVerkregen != null &&
                    this.IndicatieMetMeerObjectenVerkregen.Equals(input.IndicatieMetMeerObjectenVerkregen))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Koopsom != null)
                    hashCode = hashCode * 59 + this.Koopsom.GetHashCode();
                if (this.Koopjaar != null)
                    hashCode = hashCode * 59 + this.Koopjaar.GetHashCode();
                if (this.IndicatieMetMeerObjectenVerkregen != null)
                    hashCode = hashCode * 59 + this.IndicatieMetMeerObjectenVerkregen.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
