"""
    Kadaster - BRK-Bevragen API

    D.m.v. deze toepassing worden meerdere, korte bevragingen op de Basis Registratie Kadaster beschikbaar gesteld. Deze toepassing betreft het verstrekken van Kadastrale Onroerende Zaak informatie.   # noqa: E501

    The version of the OpenAPI document: 1.3.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
)
from ..model_utils import OpenApiModel
from openapi_client.exceptions import ApiAttributeError


def lazy_import():
    from openapi_client.model.appartementsrecht_basis import AppartementsrechtBasis
    from openapi_client.model.filiatie import Filiatie
    from openapi_client.model.locatie_kadastraal_object import LocatieKadastraalObject
    from openapi_client.model.perceel_basis import PerceelBasis
    from openapi_client.model.point_geo_json import PointGeoJSON
    from openapi_client.model.polygon_geo_json import PolygonGeoJSON
    from openapi_client.model.type_kadastraal_onroerende_zaak_enum import TypeKadastraalOnroerendeZaakEnum
    from openapi_client.model.type_koopsom import TypeKoopsom
    from openapi_client.model.type_oppervlak import TypeOppervlak
    from openapi_client.model.type_perceelnummer_verschuiving import TypePerceelnummerVerschuiving
    from openapi_client.model.waardelijst import Waardelijst
    globals()['AppartementsrechtBasis'] = AppartementsrechtBasis
    globals()['Filiatie'] = Filiatie
    globals()['LocatieKadastraalObject'] = LocatieKadastraalObject
    globals()['PerceelBasis'] = PerceelBasis
    globals()['PointGeoJSON'] = PointGeoJSON
    globals()['PolygonGeoJSON'] = PolygonGeoJSON
    globals()['TypeKadastraalOnroerendeZaakEnum'] = TypeKadastraalOnroerendeZaakEnum
    globals()['TypeKoopsom'] = TypeKoopsom
    globals()['TypeOppervlak'] = TypeOppervlak
    globals()['TypePerceelnummerVerschuiving'] = TypePerceelnummerVerschuiving
    globals()['Waardelijst'] = Waardelijst


class KadastraalOnroerendeZaak(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
        ('perceelnummer_rotatie',): {
            'inclusive_maximum': 999,
        },
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'identificatie': (str,),  # noqa: E501
            'domein': (str,),  # noqa: E501
            'indicatie_vervallen': (bool,),  # noqa: E501
            'begrenzing_perceel': (PolygonGeoJSON,),  # noqa: E501
            'perceelnummer_rotatie': (float,),  # noqa: E501
            'plaatscoordinaten': (PointGeoJSON,),  # noqa: E501
            'koopsom': (TypeKoopsom,),  # noqa: E501
            'toelichting_bewaarder': (str,),  # noqa: E501
            'type': (TypeKadastraalOnroerendeZaakEnum,),  # noqa: E501
            'aard_cultuur_bebouwd': (Waardelijst,),  # noqa: E501
            'aard_cultuur_onbebouwd': (Waardelijst,),  # noqa: E501
            'kadastrale_aanduiding': (str,),  # noqa: E501
            'kadastrale_grootte': (TypeOppervlak,),  # noqa: E501
            'perceelnummer_verschuiving': (TypePerceelnummerVerschuiving,),  # noqa: E501
            'adressen': ([LocatieKadastraalObject],),  # noqa: E501
            'zakelijk_gerechtigde_identificaties': ([str],),  # noqa: E501
            'privaatrechtelijke_beperking_identificaties': ([str],),  # noqa: E501
            'hypotheek_identificaties': ([str],),  # noqa: E501
            'beslag_identificaties': ([str],),  # noqa: E501
            'is_overgegaan_in': ([Filiatie],),  # noqa: E501
            'is_ontstaan_uit': ([Filiatie],),  # noqa: E501
            'bijbehorende_grondpercelen': ([PerceelBasis],),  # noqa: E501
            'bijbehorende_appartementsrechten': ([AppartementsrechtBasis],),  # noqa: E501
            'is_vermeld_in_stukdeel_identificaties': ([str],),  # noqa: E501
            'stuk_identificaties': ([str],),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'identificatie': 'identificatie',  # noqa: E501
        'domein': 'domein',  # noqa: E501
        'indicatie_vervallen': 'indicatieVervallen',  # noqa: E501
        'begrenzing_perceel': 'begrenzingPerceel',  # noqa: E501
        'perceelnummer_rotatie': 'perceelnummerRotatie',  # noqa: E501
        'plaatscoordinaten': 'plaatscoordinaten',  # noqa: E501
        'koopsom': 'koopsom',  # noqa: E501
        'toelichting_bewaarder': 'toelichtingBewaarder',  # noqa: E501
        'type': 'type',  # noqa: E501
        'aard_cultuur_bebouwd': 'aardCultuurBebouwd',  # noqa: E501
        'aard_cultuur_onbebouwd': 'aardCultuurOnbebouwd',  # noqa: E501
        'kadastrale_aanduiding': 'kadastraleAanduiding',  # noqa: E501
        'kadastrale_grootte': 'kadastraleGrootte',  # noqa: E501
        'perceelnummer_verschuiving': 'perceelnummerVerschuiving',  # noqa: E501
        'adressen': 'adressen',  # noqa: E501
        'zakelijk_gerechtigde_identificaties': 'zakelijkGerechtigdeIdentificaties',  # noqa: E501
        'privaatrechtelijke_beperking_identificaties': 'privaatrechtelijkeBeperkingIdentificaties',  # noqa: E501
        'hypotheek_identificaties': 'hypotheekIdentificaties',  # noqa: E501
        'beslag_identificaties': 'beslagIdentificaties',  # noqa: E501
        'is_overgegaan_in': 'isOvergegaanIn',  # noqa: E501
        'is_ontstaan_uit': 'isOntstaanUit',  # noqa: E501
        'bijbehorende_grondpercelen': 'bijbehorendeGrondpercelen',  # noqa: E501
        'bijbehorende_appartementsrechten': 'bijbehorendeAppartementsrechten',  # noqa: E501
        'is_vermeld_in_stukdeel_identificaties': 'isVermeldInStukdeelIdentificaties',  # noqa: E501
        'stuk_identificaties': 'stukIdentificaties',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """KadastraalOnroerendeZaak - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            identificatie (str): [optional]  # noqa: E501
            domein (str): Het domein waartoe de identificatie behoort. . [optional]  # noqa: E501
            indicatie_vervallen (bool): Vervallen objecten zijn opvraagbaar met de stand van zaken direct voordat het object vervallen is verklaard. Deze informatie is nodig om de filiatie-\"boom\" af te kunnen lopen en inzicht te krijgen in betrokken appartementsrechten en grondpercelen. . [optional]  # noqa: E501
            begrenzing_perceel (PolygonGeoJSON): [optional]  # noqa: E501
            perceelnummer_rotatie (float): Rotatie van het perceelnummer ten behoeve van visualisatie op de kaart. Perceelnummers worden bijvoorbeeld gekanteld om in een smal perceel te passen. . [optional]  # noqa: E501
            plaatscoordinaten (PointGeoJSON): [optional]  # noqa: E501
            koopsom (TypeKoopsom): [optional]  # noqa: E501
            toelichting_bewaarder (str): Toelichtende tekst bij een onroerende zaak van de bewaarder. De bewaarder is iemand die bij het Kadaster werkt. Hij schrijft stukken in in de openbare registers en de basisregistratie Kadaster conform de Kadasterwet. . [optional]  # noqa: E501
            type (TypeKadastraalOnroerendeZaakEnum): [optional]  # noqa: E501
            aard_cultuur_bebouwd (Waardelijst): [optional]  # noqa: E501
            aard_cultuur_onbebouwd (Waardelijst): [optional]  # noqa: E501
            kadastrale_aanduiding (str): [optional]  # noqa: E501
            kadastrale_grootte (TypeOppervlak): [optional]  # noqa: E501
            perceelnummer_verschuiving (TypePerceelnummerVerschuiving): [optional]  # noqa: E501
            adressen ([LocatieKadastraalObject]): Alle binnenlandse adressen gekoppeld aan deze kadastraal onroerende zaak . [optional]  # noqa: E501
            zakelijk_gerechtigde_identificaties ([str]): Alle personen en rechtspersonen die een zakelijk recht hebben op deze kadastraal onroerende zaak . [optional]  # noqa: E501
            privaatrechtelijke_beperking_identificaties ([str]): Alle privaatrechtelijkebeperkingen die rusten op deze kadastraal onroerende zaak . [optional]  # noqa: E501
            hypotheek_identificaties ([str]): Alle hypotheken die rusten op deze kadastraal onroerende zaak . [optional]  # noqa: E501
            beslag_identificaties ([str]): Alle beslagen die rusten op deze kadastraal onroerende zaak . [optional]  # noqa: E501
            is_overgegaan_in ([Filiatie]): [optional]  # noqa: E501
            is_ontstaan_uit ([Filiatie]): [optional]  # noqa: E501
            bijbehorende_grondpercelen ([PerceelBasis]): De grondpercelen die bij deze Kadastraal Onroerende Zaak (appartementsrecht) hoort . [optional]  # noqa: E501
            bijbehorende_appartementsrechten ([AppartementsrechtBasis]): De actuele appartementsrechten die bij deze KadastraalOnroerende Zaak (grondperceel) horen . [optional]  # noqa: E501
            is_vermeld_in_stukdeel_identificaties ([str]): [optional]  # noqa: E501
            stuk_identificaties ([str]): Identificatie van het stuk. Een stuk is een brondocument dat aanleiding geeft tot een wijziging van de gegevens in een basisregistratie. Dit kan een aangeboden stuk of een kadasterstuk zijn. . [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """KadastraalOnroerendeZaak - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            identificatie (str): [optional]  # noqa: E501
            domein (str): Het domein waartoe de identificatie behoort. . [optional]  # noqa: E501
            indicatie_vervallen (bool): Vervallen objecten zijn opvraagbaar met de stand van zaken direct voordat het object vervallen is verklaard. Deze informatie is nodig om de filiatie-\"boom\" af te kunnen lopen en inzicht te krijgen in betrokken appartementsrechten en grondpercelen. . [optional]  # noqa: E501
            begrenzing_perceel (PolygonGeoJSON): [optional]  # noqa: E501
            perceelnummer_rotatie (float): Rotatie van het perceelnummer ten behoeve van visualisatie op de kaart. Perceelnummers worden bijvoorbeeld gekanteld om in een smal perceel te passen. . [optional]  # noqa: E501
            plaatscoordinaten (PointGeoJSON): [optional]  # noqa: E501
            koopsom (TypeKoopsom): [optional]  # noqa: E501
            toelichting_bewaarder (str): Toelichtende tekst bij een onroerende zaak van de bewaarder. De bewaarder is iemand die bij het Kadaster werkt. Hij schrijft stukken in in de openbare registers en de basisregistratie Kadaster conform de Kadasterwet. . [optional]  # noqa: E501
            type (TypeKadastraalOnroerendeZaakEnum): [optional]  # noqa: E501
            aard_cultuur_bebouwd (Waardelijst): [optional]  # noqa: E501
            aard_cultuur_onbebouwd (Waardelijst): [optional]  # noqa: E501
            kadastrale_aanduiding (str): [optional]  # noqa: E501
            kadastrale_grootte (TypeOppervlak): [optional]  # noqa: E501
            perceelnummer_verschuiving (TypePerceelnummerVerschuiving): [optional]  # noqa: E501
            adressen ([LocatieKadastraalObject]): Alle binnenlandse adressen gekoppeld aan deze kadastraal onroerende zaak . [optional]  # noqa: E501
            zakelijk_gerechtigde_identificaties ([str]): Alle personen en rechtspersonen die een zakelijk recht hebben op deze kadastraal onroerende zaak . [optional]  # noqa: E501
            privaatrechtelijke_beperking_identificaties ([str]): Alle privaatrechtelijkebeperkingen die rusten op deze kadastraal onroerende zaak . [optional]  # noqa: E501
            hypotheek_identificaties ([str]): Alle hypotheken die rusten op deze kadastraal onroerende zaak . [optional]  # noqa: E501
            beslag_identificaties ([str]): Alle beslagen die rusten op deze kadastraal onroerende zaak . [optional]  # noqa: E501
            is_overgegaan_in ([Filiatie]): [optional]  # noqa: E501
            is_ontstaan_uit ([Filiatie]): [optional]  # noqa: E501
            bijbehorende_grondpercelen ([PerceelBasis]): De grondpercelen die bij deze Kadastraal Onroerende Zaak (appartementsrecht) hoort . [optional]  # noqa: E501
            bijbehorende_appartementsrechten ([AppartementsrechtBasis]): De actuele appartementsrechten die bij deze KadastraalOnroerende Zaak (grondperceel) horen . [optional]  # noqa: E501
            is_vermeld_in_stukdeel_identificaties ([str]): [optional]  # noqa: E501
            stuk_identificaties ([str]): Identificatie van het stuk. Een stuk is een brondocument dat aanleiding geeft tot een wijziging van de gegevens in een basisregistratie. Dit kan een aangeboden stuk of een kadasterstuk zijn. . [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
