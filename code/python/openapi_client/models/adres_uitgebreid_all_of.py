# coding: utf-8

"""
    Kadaster - BRK-Bevragen API

    D.m.v. deze toepassing worden meerdere, korte bevragingen op de Basis Registratie Kadaster beschikbaar gesteld. Deze toepassing betreft het verstrekken van Kadastrale Onroerende Zaak informatie.   # noqa: E501

    The version of the OpenAPI document: 1.3.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class AdresUitgebreidAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'nummeraanduiding_identificatie': 'str',
        'adresregel1': 'str',
        'adresregel2': 'str',
        'adresregel3': 'str',
        'land': 'Waardelijst'
    }

    attribute_map = {
        'nummeraanduiding_identificatie': 'nummeraanduidingIdentificatie',
        'adresregel1': 'adresregel1',
        'adresregel2': 'adresregel2',
        'adresregel3': 'adresregel3',
        'land': 'land'
    }

    def __init__(self, nummeraanduiding_identificatie=None, adresregel1=None, adresregel2=None, adresregel3=None, land=None, local_vars_configuration=None):  # noqa: E501
        """AdresUitgebreidAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._nummeraanduiding_identificatie = None
        self._adresregel1 = None
        self._adresregel2 = None
        self._adresregel3 = None
        self._land = None
        self.discriminator = None

        if nummeraanduiding_identificatie is not None:
            self.nummeraanduiding_identificatie = nummeraanduiding_identificatie
        if adresregel1 is not None:
            self.adresregel1 = adresregel1
        if adresregel2 is not None:
            self.adresregel2 = adresregel2
        if adresregel3 is not None:
            self.adresregel3 = adresregel3
        if land is not None:
            self.land = land

    @property
    def nummeraanduiding_identificatie(self):
        """Gets the nummeraanduiding_identificatie of this AdresUitgebreidAllOf.  # noqa: E501

        Identificatie van het adres in het geval dit adres in BAG geregistreerd is.   # noqa: E501

        :return: The nummeraanduiding_identificatie of this AdresUitgebreidAllOf.  # noqa: E501
        :rtype: str
        """
        return self._nummeraanduiding_identificatie

    @nummeraanduiding_identificatie.setter
    def nummeraanduiding_identificatie(self, nummeraanduiding_identificatie):
        """Sets the nummeraanduiding_identificatie of this AdresUitgebreidAllOf.

        Identificatie van het adres in het geval dit adres in BAG geregistreerd is.   # noqa: E501

        :param nummeraanduiding_identificatie: The nummeraanduiding_identificatie of this AdresUitgebreidAllOf.  # noqa: E501
        :type: str
        """

        self._nummeraanduiding_identificatie = nummeraanduiding_identificatie

    @property
    def adresregel1(self):
        """Gets the adresregel1 of this AdresUitgebreidAllOf.  # noqa: E501

        Het eerste deel van een adres is een combinatie van de straat en huisnummer.   # noqa: E501

        :return: The adresregel1 of this AdresUitgebreidAllOf.  # noqa: E501
        :rtype: str
        """
        return self._adresregel1

    @adresregel1.setter
    def adresregel1(self, adresregel1):
        """Sets the adresregel1 of this AdresUitgebreidAllOf.

        Het eerste deel van een adres is een combinatie van de straat en huisnummer.   # noqa: E501

        :param adresregel1: The adresregel1 of this AdresUitgebreidAllOf.  # noqa: E501
        :type: str
        """

        self._adresregel1 = adresregel1

    @property
    def adresregel2(self):
        """Gets the adresregel2 of this AdresUitgebreidAllOf.  # noqa: E501

        Het tweede deel van een adres is een combinatie van woonplaats eventueel in combinatie met de postcode.   # noqa: E501

        :return: The adresregel2 of this AdresUitgebreidAllOf.  # noqa: E501
        :rtype: str
        """
        return self._adresregel2

    @adresregel2.setter
    def adresregel2(self, adresregel2):
        """Sets the adresregel2 of this AdresUitgebreidAllOf.

        Het tweede deel van een adres is een combinatie van woonplaats eventueel in combinatie met de postcode.   # noqa: E501

        :param adresregel2: The adresregel2 of this AdresUitgebreidAllOf.  # noqa: E501
        :type: str
        """

        self._adresregel2 = adresregel2

    @property
    def adresregel3(self):
        """Gets the adresregel3 of this AdresUitgebreidAllOf.  # noqa: E501

        Het derde deel van een adres is optioneel een of meer geografische gebieden van het adres in het buitenland.   # noqa: E501

        :return: The adresregel3 of this AdresUitgebreidAllOf.  # noqa: E501
        :rtype: str
        """
        return self._adresregel3

    @adresregel3.setter
    def adresregel3(self, adresregel3):
        """Sets the adresregel3 of this AdresUitgebreidAllOf.

        Het derde deel van een adres is optioneel een of meer geografische gebieden van het adres in het buitenland.   # noqa: E501

        :param adresregel3: The adresregel3 of this AdresUitgebreidAllOf.  # noqa: E501
        :type: str
        """

        self._adresregel3 = adresregel3

    @property
    def land(self):
        """Gets the land of this AdresUitgebreidAllOf.  # noqa: E501


        :return: The land of this AdresUitgebreidAllOf.  # noqa: E501
        :rtype: Waardelijst
        """
        return self._land

    @land.setter
    def land(self, land):
        """Sets the land of this AdresUitgebreidAllOf.


        :param land: The land of this AdresUitgebreidAllOf.  # noqa: E501
        :type: Waardelijst
        """

        self._land = land

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdresUitgebreidAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AdresUitgebreidAllOf):
            return True

        return self.to_dict() != other.to_dict()
