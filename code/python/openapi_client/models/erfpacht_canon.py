# coding: utf-8

"""
    Kadaster - BRK-Bevragen API

    D.m.v. deze toepassing worden meerdere, korte bevragingen op de Basis Registratie Kadaster beschikbaar gesteld. Deze toepassing betreft het verstrekken van Kadastrale Onroerende Zaak informatie.   # noqa: E501

    The version of the OpenAPI document: 1.3.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class ErfpachtCanon(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'soort_erfpacht_canon': 'Waardelijst',
        'jaarlijks_bedrag': 'Bedrag',
        'betref_meer_onroerende_zaken': 'bool',
        'einddatum_afkoop': 'date',
        'indicatie_oude_onroerende_zaak_betrokken': 'bool',
        'is_gebaseerd_op_stukdeel_identificatie': 'str',
        'is_vermeld_in_stukdeel_identificaties': 'list[str]'
    }

    attribute_map = {
        'soort_erfpacht_canon': 'soortErfpachtCanon',
        'jaarlijks_bedrag': 'jaarlijksBedrag',
        'betref_meer_onroerende_zaken': 'betrefMeerOnroerendeZaken',
        'einddatum_afkoop': 'einddatumAfkoop',
        'indicatie_oude_onroerende_zaak_betrokken': 'indicatieOudeOnroerendeZaakBetrokken',
        'is_gebaseerd_op_stukdeel_identificatie': 'isGebaseerdOpStukdeelIdentificatie',
        'is_vermeld_in_stukdeel_identificaties': 'isVermeldInStukdeelIdentificaties'
    }

    def __init__(self, soort_erfpacht_canon=None, jaarlijks_bedrag=None, betref_meer_onroerende_zaken=None, einddatum_afkoop=None, indicatie_oude_onroerende_zaak_betrokken=None, is_gebaseerd_op_stukdeel_identificatie=None, is_vermeld_in_stukdeel_identificaties=None, local_vars_configuration=None):  # noqa: E501
        """ErfpachtCanon - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._soort_erfpacht_canon = None
        self._jaarlijks_bedrag = None
        self._betref_meer_onroerende_zaken = None
        self._einddatum_afkoop = None
        self._indicatie_oude_onroerende_zaak_betrokken = None
        self._is_gebaseerd_op_stukdeel_identificatie = None
        self._is_vermeld_in_stukdeel_identificaties = None
        self.discriminator = None

        if soort_erfpacht_canon is not None:
            self.soort_erfpacht_canon = soort_erfpacht_canon
        if jaarlijks_bedrag is not None:
            self.jaarlijks_bedrag = jaarlijks_bedrag
        if betref_meer_onroerende_zaken is not None:
            self.betref_meer_onroerende_zaken = betref_meer_onroerende_zaken
        if einddatum_afkoop is not None:
            self.einddatum_afkoop = einddatum_afkoop
        if indicatie_oude_onroerende_zaak_betrokken is not None:
            self.indicatie_oude_onroerende_zaak_betrokken = indicatie_oude_onroerende_zaak_betrokken
        if is_gebaseerd_op_stukdeel_identificatie is not None:
            self.is_gebaseerd_op_stukdeel_identificatie = is_gebaseerd_op_stukdeel_identificatie
        if is_vermeld_in_stukdeel_identificaties is not None:
            self.is_vermeld_in_stukdeel_identificaties = is_vermeld_in_stukdeel_identificaties

    @property
    def soort_erfpacht_canon(self):
        """Gets the soort_erfpacht_canon of this ErfpachtCanon.  # noqa: E501


        :return: The soort_erfpacht_canon of this ErfpachtCanon.  # noqa: E501
        :rtype: Waardelijst
        """
        return self._soort_erfpacht_canon

    @soort_erfpacht_canon.setter
    def soort_erfpacht_canon(self, soort_erfpacht_canon):
        """Sets the soort_erfpacht_canon of this ErfpachtCanon.


        :param soort_erfpacht_canon: The soort_erfpacht_canon of this ErfpachtCanon.  # noqa: E501
        :type: Waardelijst
        """

        self._soort_erfpacht_canon = soort_erfpacht_canon

    @property
    def jaarlijks_bedrag(self):
        """Gets the jaarlijks_bedrag of this ErfpachtCanon.  # noqa: E501


        :return: The jaarlijks_bedrag of this ErfpachtCanon.  # noqa: E501
        :rtype: Bedrag
        """
        return self._jaarlijks_bedrag

    @jaarlijks_bedrag.setter
    def jaarlijks_bedrag(self, jaarlijks_bedrag):
        """Sets the jaarlijks_bedrag of this ErfpachtCanon.


        :param jaarlijks_bedrag: The jaarlijks_bedrag of this ErfpachtCanon.  # noqa: E501
        :type: Bedrag
        """

        self._jaarlijks_bedrag = jaarlijks_bedrag

    @property
    def betref_meer_onroerende_zaken(self):
        """Gets the betref_meer_onroerende_zaken of this ErfpachtCanon.  # noqa: E501

        Indicatie waarmee wordt aangegeven dat het jaarlijks bedrag meerdere onroerende zaken betreft.   # noqa: E501

        :return: The betref_meer_onroerende_zaken of this ErfpachtCanon.  # noqa: E501
        :rtype: bool
        """
        return self._betref_meer_onroerende_zaken

    @betref_meer_onroerende_zaken.setter
    def betref_meer_onroerende_zaken(self, betref_meer_onroerende_zaken):
        """Sets the betref_meer_onroerende_zaken of this ErfpachtCanon.

        Indicatie waarmee wordt aangegeven dat het jaarlijks bedrag meerdere onroerende zaken betreft.   # noqa: E501

        :param betref_meer_onroerende_zaken: The betref_meer_onroerende_zaken of this ErfpachtCanon.  # noqa: E501
        :type: bool
        """

        self._betref_meer_onroerende_zaken = betref_meer_onroerende_zaken

    @property
    def einddatum_afkoop(self):
        """Gets the einddatum_afkoop of this ErfpachtCanon.  # noqa: E501


        :return: The einddatum_afkoop of this ErfpachtCanon.  # noqa: E501
        :rtype: date
        """
        return self._einddatum_afkoop

    @einddatum_afkoop.setter
    def einddatum_afkoop(self, einddatum_afkoop):
        """Sets the einddatum_afkoop of this ErfpachtCanon.


        :param einddatum_afkoop: The einddatum_afkoop of this ErfpachtCanon.  # noqa: E501
        :type: date
        """

        self._einddatum_afkoop = einddatum_afkoop

    @property
    def indicatie_oude_onroerende_zaak_betrokken(self):
        """Gets the indicatie_oude_onroerende_zaak_betrokken of this ErfpachtCanon.  # noqa: E501

        Indicatie waarmee wordt aangegeven dat de erfpacht oorspronkelijk gevestigd is bij een perceel dat later is verenigd met een ander perceel.   # noqa: E501

        :return: The indicatie_oude_onroerende_zaak_betrokken of this ErfpachtCanon.  # noqa: E501
        :rtype: bool
        """
        return self._indicatie_oude_onroerende_zaak_betrokken

    @indicatie_oude_onroerende_zaak_betrokken.setter
    def indicatie_oude_onroerende_zaak_betrokken(self, indicatie_oude_onroerende_zaak_betrokken):
        """Sets the indicatie_oude_onroerende_zaak_betrokken of this ErfpachtCanon.

        Indicatie waarmee wordt aangegeven dat de erfpacht oorspronkelijk gevestigd is bij een perceel dat later is verenigd met een ander perceel.   # noqa: E501

        :param indicatie_oude_onroerende_zaak_betrokken: The indicatie_oude_onroerende_zaak_betrokken of this ErfpachtCanon.  # noqa: E501
        :type: bool
        """

        self._indicatie_oude_onroerende_zaak_betrokken = indicatie_oude_onroerende_zaak_betrokken

    @property
    def is_gebaseerd_op_stukdeel_identificatie(self):
        """Gets the is_gebaseerd_op_stukdeel_identificatie of this ErfpachtCanon.  # noqa: E501

        De identificatie van het stukdeel (paragraaf in een akte met een rechtsfeit) waarop deze erfpachtcanon is gebaseerd.   # noqa: E501

        :return: The is_gebaseerd_op_stukdeel_identificatie of this ErfpachtCanon.  # noqa: E501
        :rtype: str
        """
        return self._is_gebaseerd_op_stukdeel_identificatie

    @is_gebaseerd_op_stukdeel_identificatie.setter
    def is_gebaseerd_op_stukdeel_identificatie(self, is_gebaseerd_op_stukdeel_identificatie):
        """Sets the is_gebaseerd_op_stukdeel_identificatie of this ErfpachtCanon.

        De identificatie van het stukdeel (paragraaf in een akte met een rechtsfeit) waarop deze erfpachtcanon is gebaseerd.   # noqa: E501

        :param is_gebaseerd_op_stukdeel_identificatie: The is_gebaseerd_op_stukdeel_identificatie of this ErfpachtCanon.  # noqa: E501
        :type: str
        """

        self._is_gebaseerd_op_stukdeel_identificatie = is_gebaseerd_op_stukdeel_identificatie

    @property
    def is_vermeld_in_stukdeel_identificaties(self):
        """Gets the is_vermeld_in_stukdeel_identificaties of this ErfpachtCanon.  # noqa: E501

        De identificaties van de stukdelen (paragrafen in een akte met een rechtsfeit) waarin deze erfpachtcanon is vermeld   # noqa: E501

        :return: The is_vermeld_in_stukdeel_identificaties of this ErfpachtCanon.  # noqa: E501
        :rtype: list[str]
        """
        return self._is_vermeld_in_stukdeel_identificaties

    @is_vermeld_in_stukdeel_identificaties.setter
    def is_vermeld_in_stukdeel_identificaties(self, is_vermeld_in_stukdeel_identificaties):
        """Sets the is_vermeld_in_stukdeel_identificaties of this ErfpachtCanon.

        De identificaties van de stukdelen (paragrafen in een akte met een rechtsfeit) waarin deze erfpachtcanon is vermeld   # noqa: E501

        :param is_vermeld_in_stukdeel_identificaties: The is_vermeld_in_stukdeel_identificaties of this ErfpachtCanon.  # noqa: E501
        :type: list[str]
        """

        self._is_vermeld_in_stukdeel_identificaties = is_vermeld_in_stukdeel_identificaties

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ErfpachtCanon):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ErfpachtCanon):
            return True

        return self.to_dict() != other.to_dict()
