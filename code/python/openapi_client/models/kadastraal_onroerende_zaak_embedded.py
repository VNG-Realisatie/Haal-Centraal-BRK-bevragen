# coding: utf-8

"""
    Kadaster - BRK-Bevragen API

    D.m.v. deze toepassing worden meerdere, korte bevragingen op de Basis Registratie Kadaster beschikbaar gesteld. Deze toepassing betreft het verstrekken van Kadastrale Onroerende Zaak informatie.   # noqa: E501

    The version of the OpenAPI document: 1.3.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class KadastraalOnroerendeZaakEmbedded(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'zakelijk_gerechtigden': 'list[ZakelijkGerechtigdeHal]',
        'privaatrechtelijke_beperkingen': 'list[PrivaatrechtelijkeBeperkingHal]',
        'stukken': 'list[StukHalBasis]'
    }

    attribute_map = {
        'zakelijk_gerechtigden': 'zakelijkGerechtigden',
        'privaatrechtelijke_beperkingen': 'privaatrechtelijkeBeperkingen',
        'stukken': 'stukken'
    }

    def __init__(self, zakelijk_gerechtigden=None, privaatrechtelijke_beperkingen=None, stukken=None, local_vars_configuration=None):  # noqa: E501
        """KadastraalOnroerendeZaakEmbedded - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._zakelijk_gerechtigden = None
        self._privaatrechtelijke_beperkingen = None
        self._stukken = None
        self.discriminator = None

        if zakelijk_gerechtigden is not None:
            self.zakelijk_gerechtigden = zakelijk_gerechtigden
        if privaatrechtelijke_beperkingen is not None:
            self.privaatrechtelijke_beperkingen = privaatrechtelijke_beperkingen
        if stukken is not None:
            self.stukken = stukken

    @property
    def zakelijk_gerechtigden(self):
        """Gets the zakelijk_gerechtigden of this KadastraalOnroerendeZaakEmbedded.  # noqa: E501


        :return: The zakelijk_gerechtigden of this KadastraalOnroerendeZaakEmbedded.  # noqa: E501
        :rtype: list[ZakelijkGerechtigdeHal]
        """
        return self._zakelijk_gerechtigden

    @zakelijk_gerechtigden.setter
    def zakelijk_gerechtigden(self, zakelijk_gerechtigden):
        """Sets the zakelijk_gerechtigden of this KadastraalOnroerendeZaakEmbedded.


        :param zakelijk_gerechtigden: The zakelijk_gerechtigden of this KadastraalOnroerendeZaakEmbedded.  # noqa: E501
        :type: list[ZakelijkGerechtigdeHal]
        """

        self._zakelijk_gerechtigden = zakelijk_gerechtigden

    @property
    def privaatrechtelijke_beperkingen(self):
        """Gets the privaatrechtelijke_beperkingen of this KadastraalOnroerendeZaakEmbedded.  # noqa: E501


        :return: The privaatrechtelijke_beperkingen of this KadastraalOnroerendeZaakEmbedded.  # noqa: E501
        :rtype: list[PrivaatrechtelijkeBeperkingHal]
        """
        return self._privaatrechtelijke_beperkingen

    @privaatrechtelijke_beperkingen.setter
    def privaatrechtelijke_beperkingen(self, privaatrechtelijke_beperkingen):
        """Sets the privaatrechtelijke_beperkingen of this KadastraalOnroerendeZaakEmbedded.


        :param privaatrechtelijke_beperkingen: The privaatrechtelijke_beperkingen of this KadastraalOnroerendeZaakEmbedded.  # noqa: E501
        :type: list[PrivaatrechtelijkeBeperkingHal]
        """

        self._privaatrechtelijke_beperkingen = privaatrechtelijke_beperkingen

    @property
    def stukken(self):
        """Gets the stukken of this KadastraalOnroerendeZaakEmbedded.  # noqa: E501


        :return: The stukken of this KadastraalOnroerendeZaakEmbedded.  # noqa: E501
        :rtype: list[StukHalBasis]
        """
        return self._stukken

    @stukken.setter
    def stukken(self, stukken):
        """Sets the stukken of this KadastraalOnroerendeZaakEmbedded.


        :param stukken: The stukken of this KadastraalOnroerendeZaakEmbedded.  # noqa: E501
        :type: list[StukHalBasis]
        """

        self._stukken = stukken

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, KadastraalOnroerendeZaakEmbedded):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, KadastraalOnroerendeZaakEmbedded):
            return True

        return self.to_dict() != other.to_dict()
