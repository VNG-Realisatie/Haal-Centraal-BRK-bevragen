# coding: utf-8

"""
    Kadaster - BRK-Bevragen API

    D.m.v. deze toepassing worden meerdere, korte bevragingen op de Basis Registratie Kadaster beschikbaar gesteld. Deze toepassing betreft het verstrekken van Kadastrale Onroerende Zaak informatie.   # noqa: E501

    The version of the OpenAPI document: 1.3.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class KadastraalOnroerendeZaakLinks(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        '_self': 'HalLink',
        'zakelijk_gerechtigden': 'list[HalLink]',
        'privaatrechtelijke_beperkingen': 'list[HalLink]',
        'hypotheken': 'list[HalLink]',
        'is_ontstaan_uit': 'list[HalLink]',
        'is_overgegaan_in': 'list[HalLink]',
        'beslagen': 'list[HalLink]',
        'stukken': 'list[HalLink]',
        'adressen': 'list[HalLink]',
        'bijbehorend_grondperceel': 'HalLink',
        'bijbehorende_appartementsrechten': 'list[HalLink]'
    }

    attribute_map = {
        '_self': 'self',
        'zakelijk_gerechtigden': 'zakelijkGerechtigden',
        'privaatrechtelijke_beperkingen': 'privaatrechtelijkeBeperkingen',
        'hypotheken': 'hypotheken',
        'is_ontstaan_uit': 'isOntstaanUit',
        'is_overgegaan_in': 'isOvergegaanIn',
        'beslagen': 'beslagen',
        'stukken': 'stukken',
        'adressen': 'adressen',
        'bijbehorend_grondperceel': 'bijbehorendGrondperceel',
        'bijbehorende_appartementsrechten': 'bijbehorendeAppartementsrechten'
    }

    def __init__(self, _self=None, zakelijk_gerechtigden=None, privaatrechtelijke_beperkingen=None, hypotheken=None, is_ontstaan_uit=None, is_overgegaan_in=None, beslagen=None, stukken=None, adressen=None, bijbehorend_grondperceel=None, bijbehorende_appartementsrechten=None, local_vars_configuration=None):  # noqa: E501
        """KadastraalOnroerendeZaakLinks - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self.__self = None
        self._zakelijk_gerechtigden = None
        self._privaatrechtelijke_beperkingen = None
        self._hypotheken = None
        self._is_ontstaan_uit = None
        self._is_overgegaan_in = None
        self._beslagen = None
        self._stukken = None
        self._adressen = None
        self._bijbehorend_grondperceel = None
        self._bijbehorende_appartementsrechten = None
        self.discriminator = None

        if _self is not None:
            self._self = _self
        if zakelijk_gerechtigden is not None:
            self.zakelijk_gerechtigden = zakelijk_gerechtigden
        if privaatrechtelijke_beperkingen is not None:
            self.privaatrechtelijke_beperkingen = privaatrechtelijke_beperkingen
        if hypotheken is not None:
            self.hypotheken = hypotheken
        if is_ontstaan_uit is not None:
            self.is_ontstaan_uit = is_ontstaan_uit
        if is_overgegaan_in is not None:
            self.is_overgegaan_in = is_overgegaan_in
        if beslagen is not None:
            self.beslagen = beslagen
        if stukken is not None:
            self.stukken = stukken
        if adressen is not None:
            self.adressen = adressen
        if bijbehorend_grondperceel is not None:
            self.bijbehorend_grondperceel = bijbehorend_grondperceel
        if bijbehorende_appartementsrechten is not None:
            self.bijbehorende_appartementsrechten = bijbehorende_appartementsrechten

    @property
    def _self(self):
        """Gets the _self of this KadastraalOnroerendeZaakLinks.  # noqa: E501


        :return: The _self of this KadastraalOnroerendeZaakLinks.  # noqa: E501
        :rtype: HalLink
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this KadastraalOnroerendeZaakLinks.


        :param _self: The _self of this KadastraalOnroerendeZaakLinks.  # noqa: E501
        :type: HalLink
        """

        self.__self = _self

    @property
    def zakelijk_gerechtigden(self):
        """Gets the zakelijk_gerechtigden of this KadastraalOnroerendeZaakLinks.  # noqa: E501


        :return: The zakelijk_gerechtigden of this KadastraalOnroerendeZaakLinks.  # noqa: E501
        :rtype: list[HalLink]
        """
        return self._zakelijk_gerechtigden

    @zakelijk_gerechtigden.setter
    def zakelijk_gerechtigden(self, zakelijk_gerechtigden):
        """Sets the zakelijk_gerechtigden of this KadastraalOnroerendeZaakLinks.


        :param zakelijk_gerechtigden: The zakelijk_gerechtigden of this KadastraalOnroerendeZaakLinks.  # noqa: E501
        :type: list[HalLink]
        """

        self._zakelijk_gerechtigden = zakelijk_gerechtigden

    @property
    def privaatrechtelijke_beperkingen(self):
        """Gets the privaatrechtelijke_beperkingen of this KadastraalOnroerendeZaakLinks.  # noqa: E501


        :return: The privaatrechtelijke_beperkingen of this KadastraalOnroerendeZaakLinks.  # noqa: E501
        :rtype: list[HalLink]
        """
        return self._privaatrechtelijke_beperkingen

    @privaatrechtelijke_beperkingen.setter
    def privaatrechtelijke_beperkingen(self, privaatrechtelijke_beperkingen):
        """Sets the privaatrechtelijke_beperkingen of this KadastraalOnroerendeZaakLinks.


        :param privaatrechtelijke_beperkingen: The privaatrechtelijke_beperkingen of this KadastraalOnroerendeZaakLinks.  # noqa: E501
        :type: list[HalLink]
        """

        self._privaatrechtelijke_beperkingen = privaatrechtelijke_beperkingen

    @property
    def hypotheken(self):
        """Gets the hypotheken of this KadastraalOnroerendeZaakLinks.  # noqa: E501


        :return: The hypotheken of this KadastraalOnroerendeZaakLinks.  # noqa: E501
        :rtype: list[HalLink]
        """
        return self._hypotheken

    @hypotheken.setter
    def hypotheken(self, hypotheken):
        """Sets the hypotheken of this KadastraalOnroerendeZaakLinks.


        :param hypotheken: The hypotheken of this KadastraalOnroerendeZaakLinks.  # noqa: E501
        :type: list[HalLink]
        """

        self._hypotheken = hypotheken

    @property
    def is_ontstaan_uit(self):
        """Gets the is_ontstaan_uit of this KadastraalOnroerendeZaakLinks.  # noqa: E501


        :return: The is_ontstaan_uit of this KadastraalOnroerendeZaakLinks.  # noqa: E501
        :rtype: list[HalLink]
        """
        return self._is_ontstaan_uit

    @is_ontstaan_uit.setter
    def is_ontstaan_uit(self, is_ontstaan_uit):
        """Sets the is_ontstaan_uit of this KadastraalOnroerendeZaakLinks.


        :param is_ontstaan_uit: The is_ontstaan_uit of this KadastraalOnroerendeZaakLinks.  # noqa: E501
        :type: list[HalLink]
        """

        self._is_ontstaan_uit = is_ontstaan_uit

    @property
    def is_overgegaan_in(self):
        """Gets the is_overgegaan_in of this KadastraalOnroerendeZaakLinks.  # noqa: E501


        :return: The is_overgegaan_in of this KadastraalOnroerendeZaakLinks.  # noqa: E501
        :rtype: list[HalLink]
        """
        return self._is_overgegaan_in

    @is_overgegaan_in.setter
    def is_overgegaan_in(self, is_overgegaan_in):
        """Sets the is_overgegaan_in of this KadastraalOnroerendeZaakLinks.


        :param is_overgegaan_in: The is_overgegaan_in of this KadastraalOnroerendeZaakLinks.  # noqa: E501
        :type: list[HalLink]
        """

        self._is_overgegaan_in = is_overgegaan_in

    @property
    def beslagen(self):
        """Gets the beslagen of this KadastraalOnroerendeZaakLinks.  # noqa: E501


        :return: The beslagen of this KadastraalOnroerendeZaakLinks.  # noqa: E501
        :rtype: list[HalLink]
        """
        return self._beslagen

    @beslagen.setter
    def beslagen(self, beslagen):
        """Sets the beslagen of this KadastraalOnroerendeZaakLinks.


        :param beslagen: The beslagen of this KadastraalOnroerendeZaakLinks.  # noqa: E501
        :type: list[HalLink]
        """

        self._beslagen = beslagen

    @property
    def stukken(self):
        """Gets the stukken of this KadastraalOnroerendeZaakLinks.  # noqa: E501


        :return: The stukken of this KadastraalOnroerendeZaakLinks.  # noqa: E501
        :rtype: list[HalLink]
        """
        return self._stukken

    @stukken.setter
    def stukken(self, stukken):
        """Sets the stukken of this KadastraalOnroerendeZaakLinks.


        :param stukken: The stukken of this KadastraalOnroerendeZaakLinks.  # noqa: E501
        :type: list[HalLink]
        """

        self._stukken = stukken

    @property
    def adressen(self):
        """Gets the adressen of this KadastraalOnroerendeZaakLinks.  # noqa: E501


        :return: The adressen of this KadastraalOnroerendeZaakLinks.  # noqa: E501
        :rtype: list[HalLink]
        """
        return self._adressen

    @adressen.setter
    def adressen(self, adressen):
        """Sets the adressen of this KadastraalOnroerendeZaakLinks.


        :param adressen: The adressen of this KadastraalOnroerendeZaakLinks.  # noqa: E501
        :type: list[HalLink]
        """

        self._adressen = adressen

    @property
    def bijbehorend_grondperceel(self):
        """Gets the bijbehorend_grondperceel of this KadastraalOnroerendeZaakLinks.  # noqa: E501


        :return: The bijbehorend_grondperceel of this KadastraalOnroerendeZaakLinks.  # noqa: E501
        :rtype: HalLink
        """
        return self._bijbehorend_grondperceel

    @bijbehorend_grondperceel.setter
    def bijbehorend_grondperceel(self, bijbehorend_grondperceel):
        """Sets the bijbehorend_grondperceel of this KadastraalOnroerendeZaakLinks.


        :param bijbehorend_grondperceel: The bijbehorend_grondperceel of this KadastraalOnroerendeZaakLinks.  # noqa: E501
        :type: HalLink
        """

        self._bijbehorend_grondperceel = bijbehorend_grondperceel

    @property
    def bijbehorende_appartementsrechten(self):
        """Gets the bijbehorende_appartementsrechten of this KadastraalOnroerendeZaakLinks.  # noqa: E501


        :return: The bijbehorende_appartementsrechten of this KadastraalOnroerendeZaakLinks.  # noqa: E501
        :rtype: list[HalLink]
        """
        return self._bijbehorende_appartementsrechten

    @bijbehorende_appartementsrechten.setter
    def bijbehorende_appartementsrechten(self, bijbehorende_appartementsrechten):
        """Sets the bijbehorende_appartementsrechten of this KadastraalOnroerendeZaakLinks.


        :param bijbehorende_appartementsrechten: The bijbehorende_appartementsrechten of this KadastraalOnroerendeZaakLinks.  # noqa: E501
        :type: list[HalLink]
        """

        self._bijbehorende_appartementsrechten = bijbehorende_appartementsrechten

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, KadastraalOnroerendeZaakLinks):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, KadastraalOnroerendeZaakLinks):
            return True

        return self.to_dict() != other.to_dict()
