# coding: utf-8

"""
    Kadaster - BRK-Bevragen API

    D.m.v. deze toepassing worden meerdere, korte bevragingen op de Basis Registratie Kadaster beschikbaar gesteld. Deze toepassing betreft het verstrekken van Kadastrale Onroerende Zaak informatie.   # noqa: E501

    The version of the OpenAPI document: 1.3.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class PrivaatrechtelijkeBeperkingHal(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'aard': 'Waardelijst',
        'omschrijving': 'str',
        'betreft_gedeelte_van_perceel': 'bool',
        'identificatie': 'str',
        'domein': 'str',
        'einddatum': 'date',
        'einddatum_recht': 'date',
        'stuk_identificaties': 'list[str]',
        'is_gebaseerd_op_stukdeel_identificatie': 'str',
        'is_vermeld_in_stukdeel_identificaties': 'list[str]',
        'links': 'PrivaatrechtelijkeBeperkingLinks'
    }

    attribute_map = {
        'aard': 'aard',
        'omschrijving': 'omschrijving',
        'betreft_gedeelte_van_perceel': 'betreftGedeelteVanPerceel',
        'identificatie': 'identificatie',
        'domein': 'domein',
        'einddatum': 'einddatum',
        'einddatum_recht': 'einddatumRecht',
        'stuk_identificaties': 'stukIdentificaties',
        'is_gebaseerd_op_stukdeel_identificatie': 'isGebaseerdOpStukdeelIdentificatie',
        'is_vermeld_in_stukdeel_identificaties': 'isVermeldInStukdeelIdentificaties',
        'links': '_links'
    }

    def __init__(self, aard=None, omschrijving=None, betreft_gedeelte_van_perceel=None, identificatie=None, domein=None, einddatum=None, einddatum_recht=None, stuk_identificaties=None, is_gebaseerd_op_stukdeel_identificatie=None, is_vermeld_in_stukdeel_identificaties=None, links=None, local_vars_configuration=None):  # noqa: E501
        """PrivaatrechtelijkeBeperkingHal - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._aard = None
        self._omschrijving = None
        self._betreft_gedeelte_van_perceel = None
        self._identificatie = None
        self._domein = None
        self._einddatum = None
        self._einddatum_recht = None
        self._stuk_identificaties = None
        self._is_gebaseerd_op_stukdeel_identificatie = None
        self._is_vermeld_in_stukdeel_identificaties = None
        self._links = None
        self.discriminator = None

        if aard is not None:
            self.aard = aard
        if omschrijving is not None:
            self.omschrijving = omschrijving
        if betreft_gedeelte_van_perceel is not None:
            self.betreft_gedeelte_van_perceel = betreft_gedeelte_van_perceel
        if identificatie is not None:
            self.identificatie = identificatie
        if domein is not None:
            self.domein = domein
        if einddatum is not None:
            self.einddatum = einddatum
        if einddatum_recht is not None:
            self.einddatum_recht = einddatum_recht
        if stuk_identificaties is not None:
            self.stuk_identificaties = stuk_identificaties
        if is_gebaseerd_op_stukdeel_identificatie is not None:
            self.is_gebaseerd_op_stukdeel_identificatie = is_gebaseerd_op_stukdeel_identificatie
        if is_vermeld_in_stukdeel_identificaties is not None:
            self.is_vermeld_in_stukdeel_identificaties = is_vermeld_in_stukdeel_identificaties
        if links is not None:
            self.links = links

    @property
    def aard(self):
        """Gets the aard of this PrivaatrechtelijkeBeperkingHal.  # noqa: E501


        :return: The aard of this PrivaatrechtelijkeBeperkingHal.  # noqa: E501
        :rtype: Waardelijst
        """
        return self._aard

    @aard.setter
    def aard(self, aard):
        """Sets the aard of this PrivaatrechtelijkeBeperkingHal.


        :param aard: The aard of this PrivaatrechtelijkeBeperkingHal.  # noqa: E501
        :type: Waardelijst
        """

        self._aard = aard

    @property
    def omschrijving(self):
        """Gets the omschrijving of this PrivaatrechtelijkeBeperkingHal.  # noqa: E501


        :return: The omschrijving of this PrivaatrechtelijkeBeperkingHal.  # noqa: E501
        :rtype: str
        """
        return self._omschrijving

    @omschrijving.setter
    def omschrijving(self, omschrijving):
        """Sets the omschrijving of this PrivaatrechtelijkeBeperkingHal.


        :param omschrijving: The omschrijving of this PrivaatrechtelijkeBeperkingHal.  # noqa: E501
        :type: str
        """

        self._omschrijving = omschrijving

    @property
    def betreft_gedeelte_van_perceel(self):
        """Gets the betreft_gedeelte_van_perceel of this PrivaatrechtelijkeBeperkingHal.  # noqa: E501


        :return: The betreft_gedeelte_van_perceel of this PrivaatrechtelijkeBeperkingHal.  # noqa: E501
        :rtype: bool
        """
        return self._betreft_gedeelte_van_perceel

    @betreft_gedeelte_van_perceel.setter
    def betreft_gedeelte_van_perceel(self, betreft_gedeelte_van_perceel):
        """Sets the betreft_gedeelte_van_perceel of this PrivaatrechtelijkeBeperkingHal.


        :param betreft_gedeelte_van_perceel: The betreft_gedeelte_van_perceel of this PrivaatrechtelijkeBeperkingHal.  # noqa: E501
        :type: bool
        """

        self._betreft_gedeelte_van_perceel = betreft_gedeelte_van_perceel

    @property
    def identificatie(self):
        """Gets the identificatie of this PrivaatrechtelijkeBeperkingHal.  # noqa: E501


        :return: The identificatie of this PrivaatrechtelijkeBeperkingHal.  # noqa: E501
        :rtype: str
        """
        return self._identificatie

    @identificatie.setter
    def identificatie(self, identificatie):
        """Sets the identificatie of this PrivaatrechtelijkeBeperkingHal.


        :param identificatie: The identificatie of this PrivaatrechtelijkeBeperkingHal.  # noqa: E501
        :type: str
        """

        self._identificatie = identificatie

    @property
    def domein(self):
        """Gets the domein of this PrivaatrechtelijkeBeperkingHal.  # noqa: E501

        Het domein waartoe de identificatie behoort.   # noqa: E501

        :return: The domein of this PrivaatrechtelijkeBeperkingHal.  # noqa: E501
        :rtype: str
        """
        return self._domein

    @domein.setter
    def domein(self, domein):
        """Sets the domein of this PrivaatrechtelijkeBeperkingHal.

        Het domein waartoe de identificatie behoort.   # noqa: E501

        :param domein: The domein of this PrivaatrechtelijkeBeperkingHal.  # noqa: E501
        :type: str
        """

        self._domein = domein

    @property
    def einddatum(self):
        """Gets the einddatum of this PrivaatrechtelijkeBeperkingHal.  # noqa: E501


        :return: The einddatum of this PrivaatrechtelijkeBeperkingHal.  # noqa: E501
        :rtype: date
        """
        return self._einddatum

    @einddatum.setter
    def einddatum(self, einddatum):
        """Sets the einddatum of this PrivaatrechtelijkeBeperkingHal.


        :param einddatum: The einddatum of this PrivaatrechtelijkeBeperkingHal.  # noqa: E501
        :type: date
        """

        self._einddatum = einddatum

    @property
    def einddatum_recht(self):
        """Gets the einddatum_recht of this PrivaatrechtelijkeBeperkingHal.  # noqa: E501


        :return: The einddatum_recht of this PrivaatrechtelijkeBeperkingHal.  # noqa: E501
        :rtype: date
        """
        return self._einddatum_recht

    @einddatum_recht.setter
    def einddatum_recht(self, einddatum_recht):
        """Sets the einddatum_recht of this PrivaatrechtelijkeBeperkingHal.


        :param einddatum_recht: The einddatum_recht of this PrivaatrechtelijkeBeperkingHal.  # noqa: E501
        :type: date
        """

        self._einddatum_recht = einddatum_recht

    @property
    def stuk_identificaties(self):
        """Gets the stuk_identificaties of this PrivaatrechtelijkeBeperkingHal.  # noqa: E501

                    Identificatie van het stuk. Een stuk is een brondocument dat aanleiding geeft tot een wijziging van de gegevens in een basisregistratie. Dit kan een aangeboden stuk of een Kadasterstuk zijn.   # noqa: E501

        :return: The stuk_identificaties of this PrivaatrechtelijkeBeperkingHal.  # noqa: E501
        :rtype: list[str]
        """
        return self._stuk_identificaties

    @stuk_identificaties.setter
    def stuk_identificaties(self, stuk_identificaties):
        """Sets the stuk_identificaties of this PrivaatrechtelijkeBeperkingHal.

                    Identificatie van het stuk. Een stuk is een brondocument dat aanleiding geeft tot een wijziging van de gegevens in een basisregistratie. Dit kan een aangeboden stuk of een Kadasterstuk zijn.   # noqa: E501

        :param stuk_identificaties: The stuk_identificaties of this PrivaatrechtelijkeBeperkingHal.  # noqa: E501
        :type: list[str]
        """

        self._stuk_identificaties = stuk_identificaties

    @property
    def is_gebaseerd_op_stukdeel_identificatie(self):
        """Gets the is_gebaseerd_op_stukdeel_identificatie of this PrivaatrechtelijkeBeperkingHal.  # noqa: E501

        De identificatie van het stukdeel (paragraaf in een akte met een rechtsfeit) waarop deze aantekening is gebaseerd.   # noqa: E501

        :return: The is_gebaseerd_op_stukdeel_identificatie of this PrivaatrechtelijkeBeperkingHal.  # noqa: E501
        :rtype: str
        """
        return self._is_gebaseerd_op_stukdeel_identificatie

    @is_gebaseerd_op_stukdeel_identificatie.setter
    def is_gebaseerd_op_stukdeel_identificatie(self, is_gebaseerd_op_stukdeel_identificatie):
        """Sets the is_gebaseerd_op_stukdeel_identificatie of this PrivaatrechtelijkeBeperkingHal.

        De identificatie van het stukdeel (paragraaf in een akte met een rechtsfeit) waarop deze aantekening is gebaseerd.   # noqa: E501

        :param is_gebaseerd_op_stukdeel_identificatie: The is_gebaseerd_op_stukdeel_identificatie of this PrivaatrechtelijkeBeperkingHal.  # noqa: E501
        :type: str
        """

        self._is_gebaseerd_op_stukdeel_identificatie = is_gebaseerd_op_stukdeel_identificatie

    @property
    def is_vermeld_in_stukdeel_identificaties(self):
        """Gets the is_vermeld_in_stukdeel_identificaties of this PrivaatrechtelijkeBeperkingHal.  # noqa: E501

        De identificaties van de stukdelen (paragrafen in een akte met een rechtsfeit) waarin deze aantekening is vermeld   # noqa: E501

        :return: The is_vermeld_in_stukdeel_identificaties of this PrivaatrechtelijkeBeperkingHal.  # noqa: E501
        :rtype: list[str]
        """
        return self._is_vermeld_in_stukdeel_identificaties

    @is_vermeld_in_stukdeel_identificaties.setter
    def is_vermeld_in_stukdeel_identificaties(self, is_vermeld_in_stukdeel_identificaties):
        """Sets the is_vermeld_in_stukdeel_identificaties of this PrivaatrechtelijkeBeperkingHal.

        De identificaties van de stukdelen (paragrafen in een akte met een rechtsfeit) waarin deze aantekening is vermeld   # noqa: E501

        :param is_vermeld_in_stukdeel_identificaties: The is_vermeld_in_stukdeel_identificaties of this PrivaatrechtelijkeBeperkingHal.  # noqa: E501
        :type: list[str]
        """

        self._is_vermeld_in_stukdeel_identificaties = is_vermeld_in_stukdeel_identificaties

    @property
    def links(self):
        """Gets the links of this PrivaatrechtelijkeBeperkingHal.  # noqa: E501


        :return: The links of this PrivaatrechtelijkeBeperkingHal.  # noqa: E501
        :rtype: PrivaatrechtelijkeBeperkingLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this PrivaatrechtelijkeBeperkingHal.


        :param links: The links of this PrivaatrechtelijkeBeperkingHal.  # noqa: E501
        :type: PrivaatrechtelijkeBeperkingLinks
        """

        self._links = links

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PrivaatrechtelijkeBeperkingHal):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PrivaatrechtelijkeBeperkingHal):
            return True

        return self.to_dict() != other.to_dict()
