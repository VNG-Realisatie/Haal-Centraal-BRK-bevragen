# coding: utf-8

"""
    Kadaster - BRK-Bevragen API

    D.m.v. deze toepassing worden meerdere, korte bevragingen op de Basis Registratie Kadaster beschikbaar gesteld. Deze toepassing betreft het verstrekken van Kadastrale Onroerende Zaak informatie.   # noqa: E501

    The version of the OpenAPI document: 1.3.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class PubliekrechtelijkeBeperkingHal(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'identificatie': 'str',
        'domein': 'str',
        'grondslag': 'Waardelijst',
        'datum_in_werking': 'date',
        'datum_beeindiging': 'date',
        'bevoegd_gezag': 'NietNatuurlijkPersoonBeperkt',
        'is_gebaseerd_op_stukdeel_identificatie': 'str',
        'is_vermeld_in_stukdeel_identificaties': 'list[str]',
        'links': 'PubliekrechtelijkeBeperkingLinks'
    }

    attribute_map = {
        'identificatie': 'identificatie',
        'domein': 'domein',
        'grondslag': 'grondslag',
        'datum_in_werking': 'datumInWerking',
        'datum_beeindiging': 'datumBeeindiging',
        'bevoegd_gezag': 'bevoegdGezag',
        'is_gebaseerd_op_stukdeel_identificatie': 'isGebaseerdOpStukdeelIdentificatie',
        'is_vermeld_in_stukdeel_identificaties': 'isVermeldInStukdeelIdentificaties',
        'links': '_links'
    }

    def __init__(self, identificatie=None, domein=None, grondslag=None, datum_in_werking=None, datum_beeindiging=None, bevoegd_gezag=None, is_gebaseerd_op_stukdeel_identificatie=None, is_vermeld_in_stukdeel_identificaties=None, links=None, local_vars_configuration=None):  # noqa: E501
        """PubliekrechtelijkeBeperkingHal - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._identificatie = None
        self._domein = None
        self._grondslag = None
        self._datum_in_werking = None
        self._datum_beeindiging = None
        self._bevoegd_gezag = None
        self._is_gebaseerd_op_stukdeel_identificatie = None
        self._is_vermeld_in_stukdeel_identificaties = None
        self._links = None
        self.discriminator = None

        if identificatie is not None:
            self.identificatie = identificatie
        if domein is not None:
            self.domein = domein
        if grondslag is not None:
            self.grondslag = grondslag
        if datum_in_werking is not None:
            self.datum_in_werking = datum_in_werking
        if datum_beeindiging is not None:
            self.datum_beeindiging = datum_beeindiging
        if bevoegd_gezag is not None:
            self.bevoegd_gezag = bevoegd_gezag
        if is_gebaseerd_op_stukdeel_identificatie is not None:
            self.is_gebaseerd_op_stukdeel_identificatie = is_gebaseerd_op_stukdeel_identificatie
        if is_vermeld_in_stukdeel_identificaties is not None:
            self.is_vermeld_in_stukdeel_identificaties = is_vermeld_in_stukdeel_identificaties
        if links is not None:
            self.links = links

    @property
    def identificatie(self):
        """Gets the identificatie of this PubliekrechtelijkeBeperkingHal.  # noqa: E501


        :return: The identificatie of this PubliekrechtelijkeBeperkingHal.  # noqa: E501
        :rtype: str
        """
        return self._identificatie

    @identificatie.setter
    def identificatie(self, identificatie):
        """Sets the identificatie of this PubliekrechtelijkeBeperkingHal.


        :param identificatie: The identificatie of this PubliekrechtelijkeBeperkingHal.  # noqa: E501
        :type: str
        """

        self._identificatie = identificatie

    @property
    def domein(self):
        """Gets the domein of this PubliekrechtelijkeBeperkingHal.  # noqa: E501

        Het domein waartoe de identificatie behoort.   # noqa: E501

        :return: The domein of this PubliekrechtelijkeBeperkingHal.  # noqa: E501
        :rtype: str
        """
        return self._domein

    @domein.setter
    def domein(self, domein):
        """Sets the domein of this PubliekrechtelijkeBeperkingHal.

        Het domein waartoe de identificatie behoort.   # noqa: E501

        :param domein: The domein of this PubliekrechtelijkeBeperkingHal.  # noqa: E501
        :type: str
        """

        self._domein = domein

    @property
    def grondslag(self):
        """Gets the grondslag of this PubliekrechtelijkeBeperkingHal.  # noqa: E501


        :return: The grondslag of this PubliekrechtelijkeBeperkingHal.  # noqa: E501
        :rtype: Waardelijst
        """
        return self._grondslag

    @grondslag.setter
    def grondslag(self, grondslag):
        """Sets the grondslag of this PubliekrechtelijkeBeperkingHal.


        :param grondslag: The grondslag of this PubliekrechtelijkeBeperkingHal.  # noqa: E501
        :type: Waardelijst
        """

        self._grondslag = grondslag

    @property
    def datum_in_werking(self):
        """Gets the datum_in_werking of this PubliekrechtelijkeBeperkingHal.  # noqa: E501


        :return: The datum_in_werking of this PubliekrechtelijkeBeperkingHal.  # noqa: E501
        :rtype: date
        """
        return self._datum_in_werking

    @datum_in_werking.setter
    def datum_in_werking(self, datum_in_werking):
        """Sets the datum_in_werking of this PubliekrechtelijkeBeperkingHal.


        :param datum_in_werking: The datum_in_werking of this PubliekrechtelijkeBeperkingHal.  # noqa: E501
        :type: date
        """

        self._datum_in_werking = datum_in_werking

    @property
    def datum_beeindiging(self):
        """Gets the datum_beeindiging of this PubliekrechtelijkeBeperkingHal.  # noqa: E501


        :return: The datum_beeindiging of this PubliekrechtelijkeBeperkingHal.  # noqa: E501
        :rtype: date
        """
        return self._datum_beeindiging

    @datum_beeindiging.setter
    def datum_beeindiging(self, datum_beeindiging):
        """Sets the datum_beeindiging of this PubliekrechtelijkeBeperkingHal.


        :param datum_beeindiging: The datum_beeindiging of this PubliekrechtelijkeBeperkingHal.  # noqa: E501
        :type: date
        """

        self._datum_beeindiging = datum_beeindiging

    @property
    def bevoegd_gezag(self):
        """Gets the bevoegd_gezag of this PubliekrechtelijkeBeperkingHal.  # noqa: E501


        :return: The bevoegd_gezag of this PubliekrechtelijkeBeperkingHal.  # noqa: E501
        :rtype: NietNatuurlijkPersoonBeperkt
        """
        return self._bevoegd_gezag

    @bevoegd_gezag.setter
    def bevoegd_gezag(self, bevoegd_gezag):
        """Sets the bevoegd_gezag of this PubliekrechtelijkeBeperkingHal.


        :param bevoegd_gezag: The bevoegd_gezag of this PubliekrechtelijkeBeperkingHal.  # noqa: E501
        :type: NietNatuurlijkPersoonBeperkt
        """

        self._bevoegd_gezag = bevoegd_gezag

    @property
    def is_gebaseerd_op_stukdeel_identificatie(self):
        """Gets the is_gebaseerd_op_stukdeel_identificatie of this PubliekrechtelijkeBeperkingHal.  # noqa: E501

        De identificatie van het stukdeel (paragraaf in een akte met een rechtsfeit) waarop deze publiekrechtelijke beperking is gebaseerd.   # noqa: E501

        :return: The is_gebaseerd_op_stukdeel_identificatie of this PubliekrechtelijkeBeperkingHal.  # noqa: E501
        :rtype: str
        """
        return self._is_gebaseerd_op_stukdeel_identificatie

    @is_gebaseerd_op_stukdeel_identificatie.setter
    def is_gebaseerd_op_stukdeel_identificatie(self, is_gebaseerd_op_stukdeel_identificatie):
        """Sets the is_gebaseerd_op_stukdeel_identificatie of this PubliekrechtelijkeBeperkingHal.

        De identificatie van het stukdeel (paragraaf in een akte met een rechtsfeit) waarop deze publiekrechtelijke beperking is gebaseerd.   # noqa: E501

        :param is_gebaseerd_op_stukdeel_identificatie: The is_gebaseerd_op_stukdeel_identificatie of this PubliekrechtelijkeBeperkingHal.  # noqa: E501
        :type: str
        """

        self._is_gebaseerd_op_stukdeel_identificatie = is_gebaseerd_op_stukdeel_identificatie

    @property
    def is_vermeld_in_stukdeel_identificaties(self):
        """Gets the is_vermeld_in_stukdeel_identificaties of this PubliekrechtelijkeBeperkingHal.  # noqa: E501

        De identificaties van de stukdelen (paragrafen in een akte met een rechtsfeit) waarin deze publiekrechtelijke beperking gerechtigde is vermeld.   # noqa: E501

        :return: The is_vermeld_in_stukdeel_identificaties of this PubliekrechtelijkeBeperkingHal.  # noqa: E501
        :rtype: list[str]
        """
        return self._is_vermeld_in_stukdeel_identificaties

    @is_vermeld_in_stukdeel_identificaties.setter
    def is_vermeld_in_stukdeel_identificaties(self, is_vermeld_in_stukdeel_identificaties):
        """Sets the is_vermeld_in_stukdeel_identificaties of this PubliekrechtelijkeBeperkingHal.

        De identificaties van de stukdelen (paragrafen in een akte met een rechtsfeit) waarin deze publiekrechtelijke beperking gerechtigde is vermeld.   # noqa: E501

        :param is_vermeld_in_stukdeel_identificaties: The is_vermeld_in_stukdeel_identificaties of this PubliekrechtelijkeBeperkingHal.  # noqa: E501
        :type: list[str]
        """

        self._is_vermeld_in_stukdeel_identificaties = is_vermeld_in_stukdeel_identificaties

    @property
    def links(self):
        """Gets the links of this PubliekrechtelijkeBeperkingHal.  # noqa: E501


        :return: The links of this PubliekrechtelijkeBeperkingHal.  # noqa: E501
        :rtype: PubliekrechtelijkeBeperkingLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this PubliekrechtelijkeBeperkingHal.


        :param links: The links of this PubliekrechtelijkeBeperkingHal.  # noqa: E501
        :type: PubliekrechtelijkeBeperkingLinks
        """

        self._links = links

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PubliekrechtelijkeBeperkingHal):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PubliekrechtelijkeBeperkingHal):
            return True

        return self.to_dict() != other.to_dict()
