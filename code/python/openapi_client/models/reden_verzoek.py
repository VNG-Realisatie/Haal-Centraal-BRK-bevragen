# coding: utf-8

"""
    Kadaster - BRK-Bevragen API

    D.m.v. deze toepassing worden meerdere, korte bevragingen op de Basis Registratie Kadaster beschikbaar gesteld. Deze toepassing betreft het verstrekken van Kadastrale Onroerende Zaak informatie.   # noqa: E501

    The version of the OpenAPI document: 1.3.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class RedenVerzoek(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'reden_omschrijving': 'str',
        'reden': 'Waardelijst'
    }

    attribute_map = {
        'reden_omschrijving': 'redenOmschrijving',
        'reden': 'reden'
    }

    def __init__(self, reden_omschrijving=None, reden=None, local_vars_configuration=None):  # noqa: E501
        """RedenVerzoek - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._reden_omschrijving = None
        self._reden = None
        self.discriminator = None

        if reden_omschrijving is not None:
            self.reden_omschrijving = reden_omschrijving
        if reden is not None:
            self.reden = reden

    @property
    def reden_omschrijving(self):
        """Gets the reden_omschrijving of this RedenVerzoek.  # noqa: E501

        De omschrijving van de reden voor een kadasterverzoek die afwijkt van de standaard redenen die kunnen worden opgegeven. Bij opgave van de reden is voor _overig_ gekozen.\"   # noqa: E501

        :return: The reden_omschrijving of this RedenVerzoek.  # noqa: E501
        :rtype: str
        """
        return self._reden_omschrijving

    @reden_omschrijving.setter
    def reden_omschrijving(self, reden_omschrijving):
        """Sets the reden_omschrijving of this RedenVerzoek.

        De omschrijving van de reden voor een kadasterverzoek die afwijkt van de standaard redenen die kunnen worden opgegeven. Bij opgave van de reden is voor _overig_ gekozen.\"   # noqa: E501

        :param reden_omschrijving: The reden_omschrijving of this RedenVerzoek.  # noqa: E501
        :type: str
        """

        self._reden_omschrijving = reden_omschrijving

    @property
    def reden(self):
        """Gets the reden of this RedenVerzoek.  # noqa: E501


        :return: The reden of this RedenVerzoek.  # noqa: E501
        :rtype: Waardelijst
        """
        return self._reden

    @reden.setter
    def reden(self, reden):
        """Sets the reden of this RedenVerzoek.


        :param reden: The reden of this RedenVerzoek.  # noqa: E501
        :type: Waardelijst
        """

        self._reden = reden

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RedenVerzoek):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RedenVerzoek):
            return True

        return self.to_dict() != other.to_dict()
