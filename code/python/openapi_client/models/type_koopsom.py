# coding: utf-8

"""
    Kadaster - BRK-Bevragen API

    D.m.v. deze toepassing worden meerdere, korte bevragingen op de Basis Registratie Kadaster beschikbaar gesteld. Deze toepassing betreft het verstrekken van Kadastrale Onroerende Zaak informatie.   # noqa: E501

    The version of the OpenAPI document: 1.3.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class TypeKoopsom(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'koopsom': 'int',
        'koopjaar': 'int',
        'indicatie_met_meer_objecten_verkregen': 'bool'
    }

    attribute_map = {
        'koopsom': 'koopsom',
        'koopjaar': 'koopjaar',
        'indicatie_met_meer_objecten_verkregen': 'indicatieMetMeerObjectenVerkregen'
    }

    def __init__(self, koopsom=None, koopjaar=None, indicatie_met_meer_objecten_verkregen=None, local_vars_configuration=None):  # noqa: E501
        """TypeKoopsom - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._koopsom = None
        self._koopjaar = None
        self._indicatie_met_meer_objecten_verkregen = None
        self.discriminator = None

        if koopsom is not None:
            self.koopsom = koopsom
        if koopjaar is not None:
            self.koopjaar = koopjaar
        if indicatie_met_meer_objecten_verkregen is not None:
            self.indicatie_met_meer_objecten_verkregen = indicatie_met_meer_objecten_verkregen

    @property
    def koopsom(self):
        """Gets the koopsom of this TypeKoopsom.  # noqa: E501


        :return: The koopsom of this TypeKoopsom.  # noqa: E501
        :rtype: int
        """
        return self._koopsom

    @koopsom.setter
    def koopsom(self, koopsom):
        """Sets the koopsom of this TypeKoopsom.


        :param koopsom: The koopsom of this TypeKoopsom.  # noqa: E501
        :type: int
        """

        self._koopsom = koopsom

    @property
    def koopjaar(self):
        """Gets the koopjaar of this TypeKoopsom.  # noqa: E501


        :return: The koopjaar of this TypeKoopsom.  # noqa: E501
        :rtype: int
        """
        return self._koopjaar

    @koopjaar.setter
    def koopjaar(self, koopjaar):
        """Sets the koopjaar of this TypeKoopsom.


        :param koopjaar: The koopjaar of this TypeKoopsom.  # noqa: E501
        :type: int
        """

        self._koopjaar = koopjaar

    @property
    def indicatie_met_meer_objecten_verkregen(self):
        """Gets the indicatie_met_meer_objecten_verkregen of this TypeKoopsom.  # noqa: E501


        :return: The indicatie_met_meer_objecten_verkregen of this TypeKoopsom.  # noqa: E501
        :rtype: bool
        """
        return self._indicatie_met_meer_objecten_verkregen

    @indicatie_met_meer_objecten_verkregen.setter
    def indicatie_met_meer_objecten_verkregen(self, indicatie_met_meer_objecten_verkregen):
        """Sets the indicatie_met_meer_objecten_verkregen of this TypeKoopsom.


        :param indicatie_met_meer_objecten_verkregen: The indicatie_met_meer_objecten_verkregen of this TypeKoopsom.  # noqa: E501
        :type: bool
        """

        self._indicatie_met_meer_objecten_verkregen = indicatie_met_meer_objecten_verkregen

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TypeKoopsom):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TypeKoopsom):
            return True

        return self.to_dict() != other.to_dict()
